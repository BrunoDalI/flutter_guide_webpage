import 'package:flutter/material.dart';

import '../widgets/code.dart';

class SolidPrinciplesPage extends StatelessWidget {
  const SolidPrinciplesPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('Princ√≠pios SOLID no Flutter', style: Theme.of(context).textTheme.titleLarge?.copyWith(color: Colors.white)),
          SizedBox(height: 16),
          Card(
            color: Colors.indigo.shade100,
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Text(
                'SOLID √© um conjunto de princ√≠pios para deixar o c√≥digo mais organizado, flex√≠vel e f√°cil de manter. '
                'Esses princ√≠pios ajudam a criar sistemas escal√°veis e de f√°cil manuten√ß√£o.', 
                style: TextStyle(fontSize: 15)
              ),
            ),
          ),

          SizedBox(height: 16),
          buildSolidPrinciplesTable(context),
          SizedBox(height: 24),
          Divider(color: Colors.grey),
          SizedBox(height: 24),
          Text(
            'üõí Exemplo: App de Cadastro de Produtos em Flutter',
            style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24),
          ),
          SizedBox(height: 8),
          Card(
            color: Colors.transparent,
            elevation: 0,
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Vamos imaginar um app simples com as seguintes funcionalidades:',
                    style: TextStyle(fontSize: 20, color: Colors.white),
                  ),
                  SizedBox(height: 8),
                  Text(
                    '‚Ä¢ Formul√°rio para cadastrar produtos',
                    style: TextStyle(fontSize: 18, color: Colors.white70),
                  ),
                  Text(
                    '‚Ä¢ Lista de produtos',
                    style: TextStyle(fontSize: 18, color: Colors.white70),
                  ),
                  Text(
                    '‚Ä¢ Valida√ß√£o de dados',
                    style: TextStyle(fontSize: 18, color: Colors.white70),
                  ),
                  Text(
                    '‚Ä¢ Armazenamento local (simulado)',
                    style: TextStyle(fontSize: 18, color: Colors.white70),
                  ),
                ],
              ),
            ),
          ),
          Divider(color: Colors.grey), SizedBox(height: 24),

          Text('S ‚Äì Single Responsibility Principle (Responsabilidade √önica)', style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24)),
          Text('Cada classe/m√≥dulo deve ter uma √∫nica responsabilidade.', style: TextStyle(color: Colors.grey[300])),
          Text('Aplica√ß√£o: Separar l√≥gica de UI, valida√ß√£o e armazenamento.', style: TextStyle(color: Colors.grey[300], fontWeight: FontWeight.bold)),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              code1(),
              code2(),
              code3(),
            ],
          ),
          Text('‚û°Ô∏è Cada classe tem uma responsabilidade clara.', style: TextStyle(color: Colors.grey[300])),
          SizedBox(height: 8),
          Divider(color: Colors.grey), SizedBox(height: 24),


          Text('O ‚Äì Open/Closed Principle (Aberto para extens√£o, fechado para modifica√ß√£o)', style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24)),
          Text('O sistema fica aberto para extens√£o, mas fechado para altera√ß√£o.', style: TextStyle(color: Colors.grey[300])),
          Text('Aplica√ß√£o: Extender tipos de produtos sem alterar a l√≥gica base.', style: TextStyle(color: Colors.grey[300], fontWeight: FontWeight.bold)),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              code4(),
              code5(),
            ],
          ),
          Text('‚û°Ô∏è C√≥digo fechado para modifica√ß√£o, aberto para extens√£o.', style: TextStyle(color: Colors.grey[300])),
          SizedBox(height: 8),
          Divider(color: Colors.grey), SizedBox(height: 24),


          Text('L ‚Äì Liskov Substitution Principle (Substitui√ß√£o de Liskov)', style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24)),
          Text('Todas as implementa√ß√µes se comportam da mesma forma.', style: TextStyle(color: Colors.grey[300])),
          Text('Aplica√ß√£o: Usar ProductType sem se preocupar com qual tipo est√° sendo usado.', style: TextStyle(color: Colors.grey[300], fontWeight: FontWeight.bold)),
          code6(),
          Text('‚û°Ô∏è O c√≥digo funciona com qualquer subtipo de ProductType.', style: TextStyle(color: Colors.grey[300])),
          SizedBox(height: 8),
          Divider(color: Colors.grey), SizedBox(height: 24),


          Text('I ‚Äì Interface Segregation Principle (Segrega√ß√£o de Interfaces)', style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24)),
          Text('Cada classe implementa s√≥ o que realmente usa, evitando interfaces gen√©ricas criando interfaces espec√≠ficas.', style: TextStyle(color: Colors.grey[300])),
          Text('Aplica√ß√£o: Separar responsabilidades de exibi√ß√£o e atualiza√ß√£o.', style: TextStyle(color: Colors.grey[300], fontWeight: FontWeight.bold)),
          code7(),
          Text('‚û°Ô∏è Evita interfaces "inchadas" que obrigam m√©todos in√∫teis.', style: TextStyle(color: Colors.grey[300])),
          SizedBox(height: 8),
          Divider(color: Colors.grey), SizedBox(height: 24),


          Text('D ‚Äì Dependency Inversion Principle (Invers√£o de Depend√™ncia)', style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24)),
          Text('Dependa de abstra√ß√µes, n√£o de implementa√ß√µes concretas.', style: TextStyle(color: Colors.grey[300])),
          Text('Aplica√ß√£o: Usar inje√ß√£o de depend√™ncia para o reposit√≥rio.', style: TextStyle(color: Colors.grey[300], fontWeight: FontWeight.bold)),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              code8(),
              code9(),
            ],
          ),
          Text('‚û°Ô∏è Depende de abstra√ß√µes, n√£o de implementa√ß√µes.', style: TextStyle(color: Colors.grey[300])),
          SizedBox(height: 8),
          Divider(color: Colors.grey), SizedBox(height: 24),

          Text('üß™ Interface de Cadastro com Flutter', style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24)),
          code10(),
          SizedBox(height: 8),
          Divider(color: Colors.grey), SizedBox(height: 24),



          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('üß† Por que usar SOLID no Flutter?', style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24, fontWeight: FontWeight.bold)),
              SizedBox(height: 16),
              Text('\t\tOs princ√≠pios SOLID ajudam a evitar os famosos ‚Äúc√≥digos espaguete‚Äù e facilitam a evolu√ß√£o do app sem dores de cabe√ßa:', style: TextStyle(color: Colors.grey[300], fontSize: 18)),
              SizedBox(height: 16),
              ..._buildSolidTopics([
                {
                  'title': 'Manuten√ß√£o facilitada:',
                  'description': 'Cada classe ou widget tem uma fun√ß√£o clara, tornando o c√≥digo mais leg√≠vel e f√°cil de modificar.',
                },
                {
                  'title': 'Testabilidade:',
                  'description': 'Separar responsabilidades permite testes mais precisos e independentes.',
                },
                {
                  'title': 'Reutiliza√ß√£o de componentes:',
                  'description': 'Widgets e classes bem definidos podem ser reaproveitados em diferentes partes do app.',
                },
                {
                  'title': 'Escalabilidade:',
                  'description': '√Ä medida que o app cresce, o c√≥digo continua organizado e compreens√≠vel.',
                },
                {
                  'title': 'Colabora√ß√£o eficiente:',
                  'description': 'Em equipes, cada dev pode trabalhar em partes distintas sem causar conflitos.',
                },
              ]),
            ],
          ),
          SizedBox(height: 24),


          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('‚è∞ Quando aplicar SOLID no Flutter?', style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontSize: 24, fontWeight: FontWeight.bold)),
              SizedBox(height: 16),
              Text('\t\tVoc√™ pode come√ßar a aplicar SOLID desde o in√≠cio do projeto, mas ele se torna essencial em situa√ß√µes como:', style: TextStyle(color: Colors.grey[300], fontSize: 18)),
              SizedBox(height: 16),
              Text('   ‚Ä¢ Projetos com m√∫ltiplas telas e funcionalidades.', style: TextStyle(color: Colors.grey[300], fontSize: 18)),
              Text('   ‚Ä¢ Aplicativos que exigem manuten√ß√£o cont√≠nua ou atualiza√ß√µes frequentes.', style: TextStyle(color: Colors.grey[300], fontSize: 18)),
              Text('   ‚Ä¢ Quando h√° integra√ß√£o com APIs, banco de dados ou servi√ßos externos.', style: TextStyle(color: Colors.grey[300], fontSize: 18)),
              Text('   ‚Ä¢ Em equipes com mais de um desenvolvedor, para evitar sobreposi√ß√£o de responsabilidades.', style: TextStyle(color: Colors.grey[300], fontSize: 18)),
              Text('   ‚Ä¢ Ao implementar arquiteturas como Clean Architecture ou MVVM, que se beneficiam diretamente dos princ√≠pios SOLID.', style: TextStyle(color: Colors.grey[300], fontSize: 18)),
            ],
          ),
        ],
      ),
    );
  }
}

Widget buildSolidPrinciplesTable(BuildContext context) {
  return Container(
    decoration: BoxDecoration(
      gradient: LinearGradient(
        colors: [Color(0xFF1E1E2E), Color(0xFF2A2A3E)],
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ),
      borderRadius: BorderRadius.circular(16),
      boxShadow: [
        BoxShadow(
          color: const Color(0xFF000000).withValues(alpha: (0.3 * 255)),
          blurRadius: 10,
          offset: Offset(0, 5),
        ),
      ],
    ),
    child: Table(
      columnWidths: const {
        0: FlexColumnWidth(1),
        1: FlexColumnWidth(2),
        2: FlexColumnWidth(3),
      },
      children: [
        // Cabe√ßalho da tabela
        TableRow(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF4A00E0), Color(0xFF8E2DE2)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(16),
              topRight: Radius.circular(16),
            ),
          ),
          children: [
            _buildTableCell(context, 'Princ√≠pio', isHeader: true),
            _buildTableCell(context, 'Nome', isHeader: true),
            _buildTableCell(context, 'Objetivo', isHeader: true),
          ],
        ),
        // Linhas alternadas
        ..._buildTableRows(context),
      ],
    ),
  );
}

List<TableRow> _buildTableRows(BuildContext context) {
  final rows = [
    ['S', 'Single Responsibility Principle', 'Uma classe deve ter apenas uma responsabilidade'],
    ['O', 'Open/Closed Principle', 'Aberta para extens√£o, fechada para modifica√ß√£o'],
    ['L', 'Liskov Substitution Principle', 'Subclasses devem poder substituir a classe base'],
    ['I', 'Interface Segregation Principle', 'Interfaces espec√≠ficas em vez de gen√©ricas'],
    ['D', 'Dependency Inversion Principle', 'Dependa de abstra√ß√µes, n√£o de implementa√ß√µes'],
  ];

  return rows.asMap().entries.map((entry) {
    final index = entry.key;
    final row = entry.value;
    final isEven = index % 2 == 0;

    return TableRow(
      decoration: BoxDecoration(
        color: isEven ? Color(0xFF1E1E2E) : Color(0xFF2A2A3E),
        borderRadius: index == rows.length - 1
          ? BorderRadius.only(
              bottomLeft: Radius.circular(16),
              bottomRight: Radius.circular(16),
            )
          : BorderRadius.zero,
      ),
      children: row.map((cell) => _buildTableCell(context, cell)).toList(),
    );
  }).toList();
}

Widget _buildTableCell(BuildContext context, String text, {bool isHeader = false}) {
  return Container(
    decoration: BoxDecoration(
      border: Border.all(color: isHeader ? Color(0xFF8E2DE2) : Color(0xFF4A00E0), width: 1.5),
      borderRadius: BorderRadius.circular(8),
    ),
    margin: EdgeInsets.all(4),
    padding: EdgeInsets.all(12),
    child: Text(
      text,
      style: isHeader
        ? Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white, fontWeight: FontWeight.bold)
        : TextStyle(color: Colors.grey[300], fontSize: 14),
      textAlign: TextAlign.center,
    ),
  );
}




List<Widget> _buildSolidTopics(List<Map<String, String>> topics) {
  return topics.map((topic) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('   ‚Ä¢ ${topic['title']}', style: TextStyle( color: Colors.grey[300], fontSize: 18, fontWeight: FontWeight.bold)),
          // ignore: prefer_interpolation_to_compose_strings
          Text('      ' + topic['description']!, style: TextStyle(color: Colors.grey[300], fontSize: 16)),
        ],
      ),
    );
  }).toList();
}